/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EntityMedia } from "./EntityMedia";
import { EntityMediaCountArgs } from "./EntityMediaCountArgs";
import { EntityMediaFindManyArgs } from "./EntityMediaFindManyArgs";
import { EntityMediaFindUniqueArgs } from "./EntityMediaFindUniqueArgs";
import { CreateEntityMediaArgs } from "./CreateEntityMediaArgs";
import { UpdateEntityMediaArgs } from "./UpdateEntityMediaArgs";
import { DeleteEntityMediaArgs } from "./DeleteEntityMediaArgs";
import { EntityMediaService } from "../entityMedia.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EntityMedia)
export class EntityMediaResolverBase {
  constructor(
    protected readonly service: EntityMediaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EntityMedia",
    action: "read",
    possession: "any",
  })
  async _entityMediasMeta(
    @graphql.Args() args: EntityMediaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EntityMedia])
  @nestAccessControl.UseRoles({
    resource: "EntityMedia",
    action: "read",
    possession: "any",
  })
  async entityMedias(
    @graphql.Args() args: EntityMediaFindManyArgs
  ): Promise<EntityMedia[]> {
    return this.service.entityMedias(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EntityMedia, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EntityMedia",
    action: "read",
    possession: "own",
  })
  async entityMedia(
    @graphql.Args() args: EntityMediaFindUniqueArgs
  ): Promise<EntityMedia | null> {
    const result = await this.service.entityMedia(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EntityMedia)
  @nestAccessControl.UseRoles({
    resource: "EntityMedia",
    action: "create",
    possession: "any",
  })
  async createEntityMedia(
    @graphql.Args() args: CreateEntityMediaArgs
  ): Promise<EntityMedia> {
    return await this.service.createEntityMedia({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EntityMedia)
  @nestAccessControl.UseRoles({
    resource: "EntityMedia",
    action: "update",
    possession: "any",
  })
  async updateEntityMedia(
    @graphql.Args() args: UpdateEntityMediaArgs
  ): Promise<EntityMedia | null> {
    try {
      return await this.service.updateEntityMedia({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EntityMedia)
  @nestAccessControl.UseRoles({
    resource: "EntityMedia",
    action: "delete",
    possession: "any",
  })
  async deleteEntityMedia(
    @graphql.Args() args: DeleteEntityMediaArgs
  ): Promise<EntityMedia | null> {
    try {
      return await this.service.deleteEntityMedia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
