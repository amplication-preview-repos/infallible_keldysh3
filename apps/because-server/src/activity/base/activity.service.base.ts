/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Activity as PrismaActivity,
  Session as PrismaSession,
  Venue as PrismaVenue,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ActivityServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ActivityCountArgs, "select">): Promise<number> {
    return this.prisma.activity.count(args);
  }

  async activities(
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.activity.findMany(args);
  }
  async activity(
    args: Prisma.ActivityFindUniqueArgs
  ): Promise<PrismaActivity | null> {
    return this.prisma.activity.findUnique(args);
  }
  async createActivity(
    args: Prisma.ActivityCreateArgs
  ): Promise<PrismaActivity> {
    return this.prisma.activity.create(args);
  }
  async updateActivity(
    args: Prisma.ActivityUpdateArgs
  ): Promise<PrismaActivity> {
    return this.prisma.activity.update(args);
  }
  async deleteActivity(
    args: Prisma.ActivityDeleteArgs
  ): Promise<PrismaActivity> {
    return this.prisma.activity.delete(args);
  }

  async uploadImage<T extends Prisma.ActivityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivityFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaActivity> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.activity.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.ActivityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivityFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.activity.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.ActivityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivityFindUniqueArgs>
  ): Promise<PrismaActivity> {
    const { image } = await this.prisma.activity.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.activity.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async findSessions(
    parentId: string,
    args: Prisma.SessionFindManyArgs
  ): Promise<PrismaSession[]> {
    return this.prisma.activity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sessions(args);
  }

  async getVenue(parentId: string): Promise<PrismaVenue | null> {
    return this.prisma.activity
      .findUnique({
        where: { id: parentId },
      })
      .venue();
  }
}
