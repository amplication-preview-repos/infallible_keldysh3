/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EntityMedia as PrismaEntityMedia } from "@prisma/client";

export class EntityMediaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EntityMediaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.entityMedia.count(args);
  }

  async entityMedias(
    args: Prisma.EntityMediaFindManyArgs
  ): Promise<PrismaEntityMedia[]> {
    return this.prisma.entityMedia.findMany(args);
  }
  async entityMedia(
    args: Prisma.EntityMediaFindUniqueArgs
  ): Promise<PrismaEntityMedia | null> {
    return this.prisma.entityMedia.findUnique(args);
  }
  async createEntityMedia(
    args: Prisma.EntityMediaCreateArgs
  ): Promise<PrismaEntityMedia> {
    return this.prisma.entityMedia.create(args);
  }
  async updateEntityMedia(
    args: Prisma.EntityMediaUpdateArgs
  ): Promise<PrismaEntityMedia> {
    return this.prisma.entityMedia.update(args);
  }
  async deleteEntityMedia(
    args: Prisma.EntityMediaDeleteArgs
  ): Promise<PrismaEntityMedia> {
    return this.prisma.entityMedia.delete(args);
  }
}
