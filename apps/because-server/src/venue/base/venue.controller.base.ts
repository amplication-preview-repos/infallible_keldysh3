/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { VenueService } from "../venue.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VenueCreateInput } from "./VenueCreateInput";
import { Venue } from "./Venue";
import { Post } from "../../post/base/Post";
import { VenueFindManyArgs } from "./VenueFindManyArgs";
import { VenueWhereUniqueInput } from "./VenueWhereUniqueInput";
import { VenueUpdateInput } from "./VenueUpdateInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { SessionWhereUniqueInput } from "../../session/base/SessionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VenueControllerBase {
  constructor(
    protected readonly service: VenueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Venue })
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVenue(@common.Body() data: VenueCreateInput): Promise<Venue> {
    return await this.service.createVenue({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        image: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Venue] })
  @ApiNestedQuery(VenueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async venues(@common.Req() request: Request): Promise<Venue[]> {
    const args = plainToClass(VenueFindManyArgs, request.query);
    return this.service.venues({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        image: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Venue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async venue(
    @common.Param() params: VenueWhereUniqueInput
  ): Promise<Venue | null> {
    const result = await this.service.venue({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        image: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Venue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVenue(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() data: VenueUpdateInput
  ): Promise<Venue | null> {
    try {
      return await this.service.updateVenue({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          image: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Venue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVenue(
    @common.Param() params: VenueWhereUniqueInput
  ): Promise<Venue | null> {
    try {
      return await this.service.deleteVenue({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          image: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/image")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Venue,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadImage(
    @common.Param()
    params: VenueWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Venue> {
    return this.service.uploadImage(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/image")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadImage(
    @common.Param()
    params: VenueWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadImage({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/image")
  @swagger.ApiOkResponse({
    type: Venue,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteImage(
    @common.Param()
    params: VenueWhereUniqueInput
  ): Promise<Venue> {
    return this.service.deleteImage({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/activities")
  @ApiNestedQuery(ActivityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  async findActivities(
    @common.Req() request: Request,
    @common.Param() params: VenueWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivities(params.id, {
      ...query,
      select: {
        coach: true,
        createdAt: true,
        description: true,
        id: true,
        image: true,
        isDeleted: true,
        maxParticipant: true,
        name: true,
        status: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activities")
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async connectActivities(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        connect: body,
      },
    };
    await this.service.updateVenue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activities")
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async updateActivities(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        set: body,
      },
    };
    await this.service.updateVenue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activities")
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async disconnectActivities(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        disconnect: body,
      },
    };
    await this.service.updateVenue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sessions")
  @ApiNestedQuery(SessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async findSessions(
    @common.Req() request: Request,
    @common.Param() params: VenueWhereUniqueInput
  ): Promise<Session[]> {
    const query = plainToClass(SessionFindManyArgs, request.query);
    const results = await this.service.findSessions(params.id, {
      ...query,
      select: {
        activity: {
          select: {
            id: true,
          },
        },

        coach: true,
        createdAt: true,
        date: true,
        dayOfWeek: true,
        endTime: true,
        id: true,
        maxParticipants: true,
        startTime: true,
        status: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async connectSessions(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        connect: body,
      },
    };
    await this.service.updateVenue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async updateSessions(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        set: body,
      },
    };
    await this.service.updateVenue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "Venue",
    action: "update",
    possession: "any",
  })
  async disconnectSessions(
    @common.Param() params: VenueWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        disconnect: body,
      },
    };
    await this.service.updateVenue({
      where: params,
      data,
      select: { id: true },
    });
  }
}
