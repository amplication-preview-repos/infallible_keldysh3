/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { ActivityService } from "../activity.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ActivityCreateInput } from "./ActivityCreateInput";
import { Activity } from "./Activity";
import { Post } from "../../post/base/Post";
import { ActivityFindManyArgs } from "./ActivityFindManyArgs";
import { ActivityWhereUniqueInput } from "./ActivityWhereUniqueInput";
import { ActivityUpdateInput } from "./ActivityUpdateInput";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { SessionWhereUniqueInput } from "../../session/base/SessionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ActivityControllerBase {
  constructor(
    protected readonly service: ActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Activity })
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createActivity(
    @common.Body() data: ActivityCreateInput
  ): Promise<Activity> {
    return await this.service.createActivity({
      data: {
        ...data,

        venue: data.venue
          ? {
              connect: data.venue,
            }
          : undefined,
      },
      select: {
        coach: true,
        createdAt: true,
        description: true,
        id: true,
        image: true,
        isDeleted: true,
        maxParticipant: true,
        name: true,
        status: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Activity] })
  @ApiNestedQuery(ActivityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async activities(@common.Req() request: Request): Promise<Activity[]> {
    const args = plainToClass(ActivityFindManyArgs, request.query);
    return this.service.activities({
      ...args,
      select: {
        coach: true,
        createdAt: true,
        description: true,
        id: true,
        image: true,
        isDeleted: true,
        maxParticipant: true,
        name: true,
        status: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Activity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async activity(
    @common.Param() params: ActivityWhereUniqueInput
  ): Promise<Activity | null> {
    const result = await this.service.activity({
      where: params,
      select: {
        coach: true,
        createdAt: true,
        description: true,
        id: true,
        image: true,
        isDeleted: true,
        maxParticipant: true,
        name: true,
        status: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Activity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateActivity(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() data: ActivityUpdateInput
  ): Promise<Activity | null> {
    try {
      return await this.service.updateActivity({
        where: params,
        data: {
          ...data,

          venue: data.venue
            ? {
                connect: data.venue,
              }
            : undefined,
        },
        select: {
          coach: true,
          createdAt: true,
          description: true,
          id: true,
          image: true,
          isDeleted: true,
          maxParticipant: true,
          name: true,
          status: true,
          updatedAt: true,

          venue: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Activity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteActivity(
    @common.Param() params: ActivityWhereUniqueInput
  ): Promise<Activity | null> {
    try {
      return await this.service.deleteActivity({
        where: params,
        select: {
          coach: true,
          createdAt: true,
          description: true,
          id: true,
          image: true,
          isDeleted: true,
          maxParticipant: true,
          name: true,
          status: true,
          updatedAt: true,

          venue: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/image")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: Activity,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadImage(
    @common.Param()
    params: ActivityWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<Activity> {
    return this.service.uploadImage(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/image")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadImage(
    @common.Param()
    params: ActivityWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadImage({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/image")
  @swagger.ApiOkResponse({
    type: Activity,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteImage(
    @common.Param()
    params: ActivityWhereUniqueInput
  ): Promise<Activity> {
    return this.service.deleteImage({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sessions")
  @ApiNestedQuery(SessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Session",
    action: "read",
    possession: "any",
  })
  async findSessions(
    @common.Req() request: Request,
    @common.Param() params: ActivityWhereUniqueInput
  ): Promise<Session[]> {
    const query = plainToClass(SessionFindManyArgs, request.query);
    const results = await this.service.findSessions(params.id, {
      ...query,
      select: {
        activity: {
          select: {
            id: true,
          },
        },

        coach: true,
        createdAt: true,
        date: true,
        dayOfWeek: true,
        endTime: true,
        id: true,
        maxParticipants: true,
        startTime: true,
        status: true,
        updatedAt: true,

        venue: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "update",
    possession: "any",
  })
  async connectSessions(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        connect: body,
      },
    };
    await this.service.updateActivity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "update",
    possession: "any",
  })
  async updateSessions(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        set: body,
      },
    };
    await this.service.updateActivity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sessions")
  @nestAccessControl.UseRoles({
    resource: "Activity",
    action: "update",
    possession: "any",
  })
  async disconnectSessions(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        disconnect: body,
      },
    };
    await this.service.updateActivity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
