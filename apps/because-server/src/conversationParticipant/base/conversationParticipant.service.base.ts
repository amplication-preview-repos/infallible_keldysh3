/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConversationParticipant as PrismaConversationParticipant,
  Conversation as PrismaConversation,
  User as PrismaUser,
} from "@prisma/client";

export class ConversationParticipantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationParticipantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationParticipant.count(args);
  }

  async conversationParticipants(
    args: Prisma.ConversationParticipantFindManyArgs
  ): Promise<PrismaConversationParticipant[]> {
    return this.prisma.conversationParticipant.findMany(args);
  }
  async conversationParticipant(
    args: Prisma.ConversationParticipantFindUniqueArgs
  ): Promise<PrismaConversationParticipant | null> {
    return this.prisma.conversationParticipant.findUnique(args);
  }
  async createConversationParticipant(
    args: Prisma.ConversationParticipantCreateArgs
  ): Promise<PrismaConversationParticipant> {
    return this.prisma.conversationParticipant.create(args);
  }
  async updateConversationParticipant(
    args: Prisma.ConversationParticipantUpdateArgs
  ): Promise<PrismaConversationParticipant> {
    return this.prisma.conversationParticipant.update(args);
  }
  async deleteConversationParticipant(
    args: Prisma.ConversationParticipantDeleteArgs
  ): Promise<PrismaConversationParticipant> {
    return this.prisma.conversationParticipant.delete(args);
  }

  async getConversation(parentId: string): Promise<PrismaConversation | null> {
    return this.prisma.conversationParticipant
      .findUnique({
        where: { id: parentId },
      })
      .conversation();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.conversationParticipant
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
