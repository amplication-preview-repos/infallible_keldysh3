/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Venue as PrismaVenue,
  Activity as PrismaActivity,
  Session as PrismaSession,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class VenueServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.VenueCountArgs, "select">): Promise<number> {
    return this.prisma.venue.count(args);
  }

  async venues(args: Prisma.VenueFindManyArgs): Promise<PrismaVenue[]> {
    return this.prisma.venue.findMany(args);
  }
  async venue(args: Prisma.VenueFindUniqueArgs): Promise<PrismaVenue | null> {
    return this.prisma.venue.findUnique(args);
  }
  async createVenue(args: Prisma.VenueCreateArgs): Promise<PrismaVenue> {
    return this.prisma.venue.create(args);
  }
  async updateVenue(args: Prisma.VenueUpdateArgs): Promise<PrismaVenue> {
    return this.prisma.venue.update(args);
  }
  async deleteVenue(args: Prisma.VenueDeleteArgs): Promise<PrismaVenue> {
    return this.prisma.venue.delete(args);
  }

  async uploadImage<T extends Prisma.VenueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaVenue> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "image";
    const image = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.venue.update({
      where: args.where,

      data: {
        image: image as InputJsonValue,
      },
    });
  }

  async downloadImage<T extends Prisma.VenueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image } = await this.prisma.venue.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image as unknown as LocalStorageFile
    );
  }

  async deleteImage<T extends Prisma.VenueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VenueFindUniqueArgs>
  ): Promise<PrismaVenue> {
    const { image } = await this.prisma.venue.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image as unknown as LocalStorageFile
    );

    return await this.prisma.venue.update({
      where: args.where,

      data: {
        image: Prisma.DbNull,
      },
    });
  }

  async findActivities(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.venue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activities(args);
  }

  async findSessions(
    parentId: string,
    args: Prisma.SessionFindManyArgs
  ): Promise<PrismaSession[]> {
    return this.prisma.venue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sessions(args);
  }
}
